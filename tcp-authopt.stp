#! /usr/bin/env stap

// Config-like macros: {{{

// Only trace this TCP port
// Default is used by tcp-authopt-test
@define ONLY_TRACE_TCP_PORT %(17971%)

// Enable tracing of relevant indents
@define TRACE_INDENT %(1%)

// Enable tracing of parameters
@define TRACE_PARAMS %(1%)

// Enable line-by-line function of specific function
@define TRACE_FOCUS_LINE %(1%)

// Config-like macros region end }}}


%{
#include <linux/net.h>
#include <linux/socket.h>
#include <net/tcp_states.h>
#include <linux/skbuff.h>
%}

function skb_network_header:long(skb:long) %{
    STAP_RETVALUE = (long)skb_network_header((struct sk_buff*)STAP_ARG_skb);
%}

function skb_transport_header:long(skb:long) %{
    STAP_RETVALUE = (long)skb_transport_header((struct sk_buff*)STAP_ARG_skb);
%}

function cast_tcphdr(arg) {
    return &@cast(arg, "tcphdr", "kernel<linux/tcp.h>");
}

function cast_iphdr(arg) {
    return &@cast(arg, "iphdr", "kernel<linux/ip.h>");
}

function cast_ipv6hdr(arg) {
    return &@cast(arg, "ipv6hdr", "kernel<linux/ipv6.h>");
}


function skb_tcp_header(skb) {
    return __get_skb_tcphdr(skb)
}

function skb_ip_header(skb) {
    return cast_iphdr(skb_network_header(skb))
}

function skb_ipv6_header(skb) {
    return cast_ipv6hdr(skb_network_header(skb))
}


function SOCK_STREAM:long() /* pure */ %{
    STAP_RETVALUE = SOCK_STREAM;
%}

function SOCK_DGRAM:long() /* pure */ %{
    STAP_RETVALUE = SOCK_DGRAM;
%}

function AF_INET:long() /* pure */ %{
    STAP_RETVALUE = AF_INET;
%}

function AF_INET6:long() /* pure */ %{
    STAP_RETVALUE = AF_INET6;
%}

function TCP_TIME_WAIT:long() /* pure */ %{
    STAP_RETVALUE = TCP_TIME_WAIT;
%}

function TCP_NEW_SYN_RECV:long() /* pure */ %{
    STAP_RETVALUE = TCP_NEW_SYN_RECV;
%}

function cast_sock_common(sk) {
    return &@cast(sk, "sock_common", "kernel<net/sock.h>");
}

function sk_common(sk) {
    return cast_sock_common(sk);
}

function sk_family(sk) {
    return sk_common(sk)->skc_family;
}

function sk_state(sk) {
    return sk_common(sk)->skc_state;
}

function cast_sock(sk) {
    return &@cast(sk, "sock", "kernel<net/sock.h>");
}

function sk_type(sk) {
    return cast_sock(sk)->sk_type;
}

function inet_sport(sk) {
    return ntohs(@inet_sock_cast(sk)->inet_sport);
}

function inet_dport(sk) {
    return ntohs(sk_common(sk)->skc_dport);
}

function inet_num(sk) {
    return sk_common(sk)->skc_num;
}

function tcp_sk(sk) {
    return &@cast(sk, "tcp_sock", "kernel<linux/tcp.h>");
}

function tcp_twsk(sk) {
    return &@cast(sk, "tcp_timewait_sock", "kernel<linux/tcp.h>");
}

probe begin {
    println("begin")
}

function ihdr:string() {
    return sprintf("%-*s -> %s", 2*indent_depth(+1), "", ppfunc());
}

function ohdr:string() {
    return sprintf("%-*s <- %s", 2*indent_depth(-1), "", ppfunc());
}

function ehdrl:string() {
    return sprintf("%-*s == %s", 2 + 2*indent_depth(0), "", pp())
}

function tcp_authopt_info(sk) {
    /* minisocks do not contain a sk_type! */
    if (sk_state(sk) == TCP_TIME_WAIT())
        return tcp_twsk(sk)->tw_authopt_info;
    else if (sk_state(sk) == TCP_NEW_SYN_RECV())
        return 0;
    else if (sk_type(sk) == SOCK_STREAM())
        return tcp_sk(sk)->authopt_info;
    else
        return 0;
}

function interesting_sk(sk) {
    if (!sk)
        return 0;

    /* Only AF_INET or AF_INET6 */
    if (sk_family(sk) != AF_INET() && sk_family(sk) != AF_INET6())
        return 0;

    /* Always if authopt_info present */
    if (tcp_authopt_info(sk))
        return 1;

    %( @ONLY_TRACE_TCP_PORT != 0 %?
        if (inet_sport(sk) != @ONLY_TRACE_TCP_PORT || inet_dport(sk) != @ONLY_TRACE_TCP_PORT || inet_num(sk) != @ONLY_TRACE_TCP_PORT)
            return 0;
    %:%)

    return 1;
}

%( @TRACE_INDENT == 1 %?
/*
 * Functions to track for indent_depth.
 *
 * None of these can be inline because the return probe fails
 */
probe focus_indent += kernel.function("__tcp_transmit_skb") {}
probe focus_indent += kernel.function("__tcp_authopt_inbound_check") {}
probe focus_indent += kernel.function("tcp_authopt_hash") {}
probe focus_indent += kernel.function("tcp_v6_send_response") {}
probe focus_indent += kernel.function("__tcp_authopt_calc_mac") {}
probe focus_indent += kernel.function("tcp_authopt_hash_packet") {}

probe focus_indent {
    if (!interesting_sk($sk))
        next;
    printf("%s\n", ihdr())
}

probe focus_indent.return {
    sk = @entry($sk);
    if (!interesting_sk(sk))
        next;
    printf("%s return %s\n", ohdr(), $$return)
}
%:%)

/*
 * Function to print arguments of
 * Can be inline
 */
%( @TRACE_PARAMS == 1 %?
probe focus_func += kernel.function("__tcp_transmit_skb") {}
probe focus_func += kernel.function("tcp_authopt_init_options") {}
probe focus_func += kernel.function("tcp_authopt_hash") {}
probe focus_func += kernel.function("tcp_create_openreq_child") {}
probe focus_func += kernel.function("tcp_established_options") {}
probe focus_func += kernel.function("__tcp_authopt_inbound_check") {}
probe focus_func += kernel.function("tcp_v4_syn_recv_sock") {}
probe focus_func += kernel.function("tcp_v4_timewait_ack")? {}
probe focus_func += kernel.function("tcp_v4_send_reset") {}
probe focus_func += kernel.function("tcp_v4_send_ack")? {}
probe focus_func += kernel.function("tcp_v6_syn_recv_sock") {}
probe focus_func += kernel.function("tcp_v6_send_response") {}
probe focus_func += kernel.function("tcp_v6_timewait_ack")? {}
probe focus_func += kernel.function("tcp_v6_send_reset") {}
probe focus_func += kernel.function("tcp_v6_send_ack")? {}
probe focus_func += kernel.function("compute_packet_sne")? {}
probe focus_func += kernel.function("tcp_authopt_hash_packet")? {}
probe focus_func += kernel.function("tcp_authopt_get_isn")? {}

probe focus_func {
    if (!interesting_sk($sk))
        next
    printf("%s: caller: %s parms: %s\n", ehdrl(), caller(), $$parms);
    printf("%s: sk=%p state=%d sport=%d dport=%d\n", ehdrl(), $sk, sk_state($sk), inet_sport($sk), inet_dport($sk));
}
%:%)

%( @TRACE_FOCUS_LINE == 1 %?
/* Areas to trace line-by-line: */
probe focus_line += kernel.statement("print_tcpao_notice*@*:*") {}
//probe focus_line += kernel.statement("tcp_authopt_init_options@*:*") {}
//probe focus_line += kernel.statement("compute_packet_sne@*:*") {}
//probe focus_line += kernel.statement("tcp_set_authopt*@*:*") {}
//probe focus_line += kernel.statement("*@net/ipv4/tcp_authopt.c:*") {}
//probe focus_line += kernel.statement("tcp_v6_send_response*@*:*") {}

probe focus_line {
    if (@defined($sk) && !interesting_sk($sk))
        next;
    printf("%s: vars: %s\n", ehdrl(), $$vars)
}
%:%)
